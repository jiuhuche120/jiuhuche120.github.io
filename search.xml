<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP3次握手和4次挥手</title>
      <link href="2020/12/01/TCP3%E6%AC%A1%E6%8F%A1%E6%89%8B4%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>2020/12/01/TCP3%E6%AC%A1%E6%8F%A1%E6%89%8B4%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h5><p><img src="https://cdn.jsdelivr.net/gh/jiuhuche120/BlogCDN/gitblog/image-20200801130100728-20201201001450-4deae572b793c813ca429ec4abca343d.png" alt="image-20200801130100728"></p><p>32位序号：seq</p><p>32位确认序号：ack</p><h5 id="面试应答"><a href="#面试应答" class="headerlink" title="面试应答"></a>面试应答</h5><p>面试官你好，这个问题我是知道的，TCP/IP协议是传输层的一个面向连接的，安全可靠的传输协议。</p><p>三次握手连接是为了保证能建立一个可靠的、安全的连接。第一次握手是客户端发起，客户端会向服务端发送一个报文，在报文里，syn位标志位会置为1，服务端收到这个报文之后，就知道客户端要和建立一个新的连接，于是服务端就向客户端发送一个确认消息包，这个包里ack位置1，以上两次握手以后，对于客户端而言，已经知道了所有的信息，即客户端既能给服务端发消息也能收到服务端的消息。但是对于服务端而言，两次握手是不够的，客户端只知道客户端发给我的信息能收到，但是我发给客户端的消息客户端能不能收到，我不知道。所以还需要进行第三次握手，第三次握手就是当客户端收到服务端发过来的确认消息包之后，还需要继续给服务端一个回应，也是一个ack位置1的确认消息包。通过以上三次连接，不管是服务端还是客户端，都彼此知道了，我既能给对方发消息，也能收到对方给我的消息，那么这个连接就能被安全的建立了。</p><p>四次挥手连接也是客户端先发起的，客户端给服务端发送一个报文，这个报文里面fin标示位置1。当服务端收到这个报文之后，服务端就知道客户端想要和我断开连接。但是此时服务端不一定能够做好准备。因为当客户端发送断开连接的消息包的时候，服务端极有可能还有未发送完的消息，它还要继续发送。所以服务端此时只能进行一个消息确认，告诉客户端我知道你要和我断开连接了，但是我还没有准备好，准备好了我会告诉你。发完这个消息确认包之后，可能稍过片刻，服务端会给客户端发送一个断开连接的报文，也是一个fin位置1的报文，当客户端收到这个报文后，也需要发送一个消息确认报文。通过这4次的沟通，就可以知道不论是服务端还是客户端都已经做好了准备，随时可以断开连接，于是连接就断开了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for和foreach的区别</title>
      <link href="2020/11/28/for%E5%92%8Cforeach%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2020/11/28/for%E5%92%8Cforeach%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>之前被问到过这样一个问题：for和foreach的性能差异是怎么样的。因此特意在本地做了有关for和foreach的性能对比。</p><a id="more"></a><p>主要从<strong>数组</strong>、<strong>链表</strong>这两种存储结构分析</p><p>数据量的选取为1w ,10w,100w,1000w</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> listSize_1w = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">int</span> listSize_10w = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">int</span> listSize_100w = <span class="number">1000000</span>;</span><br><span class="line">        <span class="keyword">int</span> listSize_1000w = <span class="number">10000000</span>;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listSize_1w; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> arrayForStartTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listSize_1w; i++) &#123;</span><br><span class="line">            num = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> arrayForEndTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;用for循环arrayList花费的时间：&quot;</span> + (arrayForEndTime - arrayForStartTime) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> arrayForeachStartTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">            num = integer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> arrayForeachEndTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;用foreach循环arrayList花费的时间：&quot;</span> + (arrayForeachEndTime - arrayForeachStartTime ) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><strong>ArrayList</strong></h4><p><strong>数量级是1w</strong></p><p><code>用for循环arrayList花费的时间：1毫秒</code><br>        <code>用foreach循环arrayList花费的时间：1毫秒</code></p><p><strong>数量级是10w</strong></p><p><code>用for循环arrayList花费的时间：2毫秒</code><br>        <code>用foreach循环arrayList花费的时间：3毫秒</code></p><p><strong>数量级是100w</strong></p><p><code>用for循环arrayList花费的时间：11毫秒</code><br>        <code>用foreach循环arrayList花费的时间：10毫秒</code></p><p><strong>数量级是1000w</strong></p><p><code>用for循环arrayList花费的时间：54毫秒</code><br>        <code>用foreach循环arrayList花费的时间：38毫秒</code></p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p><strong>数量级是1w</strong></p><p><code>用for循环arrayList花费的时间：73毫秒</code></p><p><code>用foreach循环arrayList花费的时间：2毫秒</code></p><p><strong>数量级是10w</strong></p><p><code>用for循环arrayList花费的时间：10331毫秒</code><br>        <code>用foreach循环arrayList花费的时间：3毫秒</code></p><p><strong>数量级是100w</strong></p><p>for循环的时间远大于foreach的时间</p><p><strong>数量级是1000w</strong></p><p>for循环的时间远大于foreach的时间</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>在数组类型中for和foreach都能让人接受，for的效率虽然相比与foreach要更低点，但两者仍然是相同数量级，考虑到从使用场景的灵活性看，for远胜于foreach</li><li>在链表结构中一定要使用foreach，因为在链表结构使用get获取数据的复杂会达到O(n*n)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
